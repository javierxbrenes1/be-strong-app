generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model gymClassTime {
  id              Int               @id @default(autoincrement())
  isoTime         String            @db.VarChar(16)
  member          member[]
  gymClassOnTimes gymClassOnTimes[]
}

model gymClass {
  id                     Int                   @id @default(autoincrement())
  classDate              DateTime?             @db.Date
  classDurationInMinutes Int?                  @db.Integer
  classType              String?               @db.VarChar(50)
  classDescription       String?
  memberAttendanceLog    memberAttendanceLog[]
  gymClassOnTimes        gymClassOnTimes[]
}

model gymClassOnTimes {
  gymClassTime   gymClassTime @relation(fields: [gymClassTimeId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  gymClass       gymClass     @relation(fields: [gymClassId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  gymClassTimeId Int
  gymClassId     Int

  @@id([gymClassTimeId, gymClassId])
}

model member {
  code                String                @id @db.VarChar(16)
  name                String                @db.VarChar(100)
  birthDate           DateTime              @db.Date
  height              Float
  genre               String                @db.VarChar(10)
  phone               String?               @db.VarChar(10)
  email               String?               @db.VarChar(150)
  avatar              String?               @db.VarChar(150)
  isActive            Boolean?
  observations        String?
  preferredClassTime  Int?                  @db.Integer
  createAt            DateTime?             @default(now()) @db.Timestamp(6)
  modifyAt            DateTime?             @default(now()) @db.Timestamp(6)
  memberAttendance    memberAttendance?
  memberAttendanceLog memberAttendanceLog[]
  memberMeasures      memberMeasures[]
  user                user?
  gymClassTime        gymClassTime?         @relation(fields: [preferredClassTime], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model memberAttendance {
  memberCode String   @id @db.VarChar(16)
  monday     Boolean?
  tuesday    Boolean?
  wednesday  Boolean?
  thursday   Boolean?
  friday     Boolean?
  saturday   Boolean?
  sunday     Boolean?
  member     member   @relation(fields: [memberCode], references: [code], onDelete: NoAction, onUpdate: NoAction)
}

model memberAttendanceLog {
  id         Int      @id @default(autoincrement())
  memberCode String   @db.VarChar(16)
  gymClassId Int      @default(autoincrement())
  gymClass   gymClass @relation(fields: [gymClassId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  member     member   @relation(fields: [memberCode], references: [code], onDelete: NoAction, onUpdate: NoAction)
}

model memberMeasures {
  id                     Int       @id @default(autoincrement())
  memberCode             String    @db.VarChar(16)
  date                   DateTime? @default(now())
  age                    Int
  weight                 Float
  corporalFat            Float
  muscle                 Float
  bodyMassIndex          Float
  corporalWaterPct       Float
  calories               Float
  muscleResult           String    @db.VarChar(20)
  corporalFatResult      String    @db.VarChar(20)
  bodyMassIndexResult    String    @db.VarChar(20)
  corporalWaterPctResult String    @db.VarChar(20)
  caloriesResult         String    @db.VarChar(20)
  member                 member    @relation(fields: [memberCode], references: [code], onDelete: NoAction, onUpdate: NoAction)
}

model user {
  memberCode             String    @id @db.VarChar(16)
  pwd                    String
  role                   String    @db.VarChar(16)
  lastLoginDate          DateTime? @db.Timestamp(6)
  lastPasswordChangeDate DateTime? @db.Timestamp(6)
  isBlocked              Boolean?
  member                 member    @relation(fields: [memberCode], references: [code], onDelete: NoAction, onUpdate: NoAction)
}

model ownerUser {
  username               String    @id @db.VarChar(25)
  name                   String    @default("") @db.VarChar(100)
  email                  String    @default("") @db.VarChar(100)
  pwd                    String
  role                   String    @db.VarChar(16)
  isBlocked              Boolean   @default(false)
  lastLoginDate          DateTime?
  lastPasswordChangeDate DateTime?
  registeredAt           DateTime  @default(now())
}
